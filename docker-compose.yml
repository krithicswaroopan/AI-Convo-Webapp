version: '3.8'

services:
  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai-assistant-backend
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - HOST=0.0.0.0
      - PORT=8000
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
      - DEFAULT_LLM_MODEL=meta-llama/llama-3.1-8b-instruct
      - WHISPER_MODEL=whisper-1
      - GOOGLE_CLOUD_PROJECT_ID=${GOOGLE_CLOUD_PROJECT_ID}
      - GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/google-credentials.json
      - SAMPLE_RATE=16000
      - CHUNK_DURATION_MS=30
      - VAD_MODE=3
      - JANUS_URL=ws://janus:8188
      - JANUS_ADMIN_SECRET=${JANUS_ADMIN_SECRET}
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_assistant
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - LOG_LEVEL=INFO
    volumes:
      - ./credentials:/app/credentials:ro
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - janus
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai-assistant-frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Janus WebRTC Gateway
  janus:
    image: janusgraph/janus:latest
    container_name: ai-assistant-janus
    ports:
      - "8088:8088"  # HTTP API
      - "8089:8089"  # HTTPS API
      - "8000:8000"  # WebSocket
      - "8188:8188"  # WebSocket (admin)
      - "7088:7088"  # RTP
      - "7089:7089"  # RTCP
    environment:
      - JANUS_CONFIG_PATH=/etc/janus
      - JANUS_CONFIG_FILE=janus.plugin.audiobridge.jcfg
    volumes:
      - ./janus-config:/etc/janus
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8088/janus/info"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ai-assistant-postgres
    environment:
      - POSTGRES_DB=ai_assistant
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ai-assistant-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-assistant-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: ai-assistant-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - ai-assistant-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  ai-assistant-network:
    driver: bridge 